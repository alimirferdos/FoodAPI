# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.recipe import Recipe  # noqa: F401,E501
from swagger_server import util


class Hits(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, q: str=None, _from: int=None, to: int=None, count: int=None, more: bool=None, hits: List[Recipe]=None):  # noqa: E501
        """Hits - a model defined in Swagger

        :param q: The q of this Hits.  # noqa: E501
        :type q: str
        :param _from: The _from of this Hits.  # noqa: E501
        :type _from: int
        :param to: The to of this Hits.  # noqa: E501
        :type to: int
        :param count: The count of this Hits.  # noqa: E501
        :type count: int
        :param more: The more of this Hits.  # noqa: E501
        :type more: bool
        :param hits: The hits of this Hits.  # noqa: E501
        :type hits: List[Recipe]
        """
        self.swagger_types = {
            'q': str,
            '_from': int,
            'to': int,
            'count': int,
            'more': bool,
            'hits': List[Recipe]
        }

        self.attribute_map = {
            'q': 'q',
            '_from': 'from',
            'to': 'to',
            'count': 'count',
            'more': 'more',
            'hits': 'hits'
        }
        self._q = q
        self.__from = _from
        self._to = to
        self._count = count
        self._more = more
        self._hits = hits

    @classmethod
    def from_dict(cls, dikt) -> 'Hits':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The hits of this Hits.  # noqa: E501
        :rtype: Hits
        """
        return util.deserialize_model(dikt, cls)

    @property
    def q(self) -> str:
        """Gets the q of this Hits.

        Query text, as submitted  # noqa: E501

        :return: The q of this Hits.
        :rtype: str
        """
        return self._q

    @q.setter
    def q(self, q: str):
        """Sets the q of this Hits.

        Query text, as submitted  # noqa: E501

        :param q: The q of this Hits.
        :type q: str
        """

        self._q = q

    @property
    def _from(self) -> int:
        """Gets the _from of this Hits.

        First result index, as submitted  # noqa: E501

        :return: The _from of this Hits.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from: int):
        """Sets the _from of this Hits.

        First result index, as submitted  # noqa: E501

        :param _from: The _from of this Hits.
        :type _from: int
        """

        self.__from = _from

    @property
    def to(self) -> int:
        """Gets the to of this Hits.

        Last result index, as submitted  # noqa: E501

        :return: The to of this Hits.
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to: int):
        """Sets the to of this Hits.

        Last result index, as submitted  # noqa: E501

        :param to: The to of this Hits.
        :type to: int
        """

        self._to = to

    @property
    def count(self) -> int:
        """Gets the count of this Hits.

        Number of results found  # noqa: E501

        :return: The count of this Hits.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this Hits.

        Number of results found  # noqa: E501

        :param count: The count of this Hits.
        :type count: int
        """

        self._count = count

    @property
    def more(self) -> bool:
        """Gets the more of this Hits.

        More than the maximum allowed number of results found  # noqa: E501

        :return: The more of this Hits.
        :rtype: bool
        """
        return self._more

    @more.setter
    def more(self, more: bool):
        """Sets the more of this Hits.

        More than the maximum allowed number of results found  # noqa: E501

        :param more: The more of this Hits.
        :type more: bool
        """

        self._more = more

    @property
    def hits(self) -> List[Recipe]:
        """Gets the hits of this Hits.

        Matching results (Hit objects)  # noqa: E501

        :return: The hits of this Hits.
        :rtype: List[Recipe]
        """
        return self._hits

    @hits.setter
    def hits(self, hits: List[Recipe]):
        """Sets the hits of this Hits.

        Matching results (Hit objects)  # noqa: E501

        :param hits: The hits of this Hits.
        :type hits: List[Recipe]
        """

        self._hits = hits
